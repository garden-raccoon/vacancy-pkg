// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: vacancy-service.proto

package vacancy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VacancyService_CreateVacancy_FullMethodName          = "/service.VacancyService/CreateVacancy"
	VacancyService_GetVacancies_FullMethodName           = "/service.VacancyService/GetVacancies"
	VacancyService_GetEmployerFromVacancy_FullMethodName = "/service.VacancyService/GetEmployerFromVacancy"
	VacancyService_GetVacancyByUUID_FullMethodName       = "/service.VacancyService/GetVacancyByUUID"
)

// VacancyServiceClient is the client API for VacancyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrderService is
type VacancyServiceClient interface {
	CreateVacancy(ctx context.Context, in *Vacancy, opts ...grpc.CallOption) (*VacancyDbEmpty, error)
	GetVacancies(ctx context.Context, in *VacancyDbEmpty, opts ...grpc.CallOption) (*Vacancies, error)
	GetEmployerFromVacancy(ctx context.Context, in *VacancyReq, opts ...grpc.CallOption) (*EmployerResp, error)
	GetVacancyByUUID(ctx context.Context, in *VacancyReq, opts ...grpc.CallOption) (*Vacancy, error)
}

type vacancyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVacancyServiceClient(cc grpc.ClientConnInterface) VacancyServiceClient {
	return &vacancyServiceClient{cc}
}

func (c *vacancyServiceClient) CreateVacancy(ctx context.Context, in *Vacancy, opts ...grpc.CallOption) (*VacancyDbEmpty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VacancyDbEmpty)
	err := c.cc.Invoke(ctx, VacancyService_CreateVacancy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacancyServiceClient) GetVacancies(ctx context.Context, in *VacancyDbEmpty, opts ...grpc.CallOption) (*Vacancies, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vacancies)
	err := c.cc.Invoke(ctx, VacancyService_GetVacancies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacancyServiceClient) GetEmployerFromVacancy(ctx context.Context, in *VacancyReq, opts ...grpc.CallOption) (*EmployerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployerResp)
	err := c.cc.Invoke(ctx, VacancyService_GetEmployerFromVacancy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacancyServiceClient) GetVacancyByUUID(ctx context.Context, in *VacancyReq, opts ...grpc.CallOption) (*Vacancy, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vacancy)
	err := c.cc.Invoke(ctx, VacancyService_GetVacancyByUUID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VacancyServiceServer is the server API for VacancyService service.
// All implementations must embed UnimplementedVacancyServiceServer
// for forward compatibility.
//
// OrderService is
type VacancyServiceServer interface {
	CreateVacancy(context.Context, *Vacancy) (*VacancyDbEmpty, error)
	GetVacancies(context.Context, *VacancyDbEmpty) (*Vacancies, error)
	GetEmployerFromVacancy(context.Context, *VacancyReq) (*EmployerResp, error)
	GetVacancyByUUID(context.Context, *VacancyReq) (*Vacancy, error)
	mustEmbedUnimplementedVacancyServiceServer()
}

// UnimplementedVacancyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVacancyServiceServer struct{}

func (UnimplementedVacancyServiceServer) CreateVacancy(context.Context, *Vacancy) (*VacancyDbEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVacancy not implemented")
}
func (UnimplementedVacancyServiceServer) GetVacancies(context.Context, *VacancyDbEmpty) (*Vacancies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacancies not implemented")
}
func (UnimplementedVacancyServiceServer) GetEmployerFromVacancy(context.Context, *VacancyReq) (*EmployerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployerFromVacancy not implemented")
}
func (UnimplementedVacancyServiceServer) GetVacancyByUUID(context.Context, *VacancyReq) (*Vacancy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacancyByUUID not implemented")
}
func (UnimplementedVacancyServiceServer) mustEmbedUnimplementedVacancyServiceServer() {}
func (UnimplementedVacancyServiceServer) testEmbeddedByValue()                        {}

// UnsafeVacancyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VacancyServiceServer will
// result in compilation errors.
type UnsafeVacancyServiceServer interface {
	mustEmbedUnimplementedVacancyServiceServer()
}

func RegisterVacancyServiceServer(s grpc.ServiceRegistrar, srv VacancyServiceServer) {
	// If the following call pancis, it indicates UnimplementedVacancyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VacancyService_ServiceDesc, srv)
}

func _VacancyService_CreateVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacancy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacancyServiceServer).CreateVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VacancyService_CreateVacancy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacancyServiceServer).CreateVacancy(ctx, req.(*Vacancy))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacancyService_GetVacancies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacancyDbEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacancyServiceServer).GetVacancies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VacancyService_GetVacancies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacancyServiceServer).GetVacancies(ctx, req.(*VacancyDbEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacancyService_GetEmployerFromVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacancyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacancyServiceServer).GetEmployerFromVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VacancyService_GetEmployerFromVacancy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacancyServiceServer).GetEmployerFromVacancy(ctx, req.(*VacancyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacancyService_GetVacancyByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacancyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacancyServiceServer).GetVacancyByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VacancyService_GetVacancyByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacancyServiceServer).GetVacancyByUUID(ctx, req.(*VacancyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VacancyService_ServiceDesc is the grpc.ServiceDesc for VacancyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VacancyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.VacancyService",
	HandlerType: (*VacancyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVacancy",
			Handler:    _VacancyService_CreateVacancy_Handler,
		},
		{
			MethodName: "GetVacancies",
			Handler:    _VacancyService_GetVacancies_Handler,
		},
		{
			MethodName: "GetEmployerFromVacancy",
			Handler:    _VacancyService_GetEmployerFromVacancy_Handler,
		},
		{
			MethodName: "GetVacancyByUUID",
			Handler:    _VacancyService_GetVacancyByUUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vacancy-service.proto",
}
